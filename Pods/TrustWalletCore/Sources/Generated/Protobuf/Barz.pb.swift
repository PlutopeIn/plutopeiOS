// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Barz.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright Â© 2017-2023 Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents the access control to the wallet
public struct TW_Barz_Proto_ContractOwner {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var kind: TW_Barz_Proto_ContractOwner.OneOf_Kind? = nil

  public var publicKey: String {
    get {
      if case .publicKey(let v)? = kind {return v}
      return String()
    }
    set {kind = .publicKey(newValue)}
  }

  public var attestationObject: String {
    get {
      if case .attestationObject(let v)? = kind {return v}
      return String()
    }
    set {kind = .attestationObject(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Kind: Equatable {
    case publicKey(String)
    case attestationObject(String)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Barz_Proto_ContractOwner.OneOf_Kind, rhs: TW_Barz_Proto_ContractOwner.OneOf_Kind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.publicKey, .publicKey): return {
        guard case .publicKey(let l) = lhs, case .publicKey(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.attestationObject, .attestationObject): return {
        guard case .attestationObject(let l) = lhs, case .attestationObject(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Input parameters for calculating a counterfactual address for ERC-4337 based smart contract wallet
public struct TW_Barz_Proto_ContractAddressInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Address of the contract factory
  public var factory: String = String()

  /// Diamond proxy facets required for the contract setup
  public var diamondCutFacet: String = String()

  public var accountFacet: String = String()

  public var verificationFacet: String = String()

  /// ERC-4337 entry point
  public var entryPoint: String = String()

  /// Diamond Loupe from ERC-2535: Diamonds, Multi-Facet Proxy
  public var diamondLoupeFacet: String = String()

  /// Diamond init from ERC-2535: Diamonds, Multi-Facet Proxy
  public var diamondInit: String = String()

  /// Address of the contract that defines if a facet is secure
  public var facetRegistry: String = String()

  /// Bytecode of the smart contract to deploy
  public var bytecode: String = String()

  /// Owner of the wallet
  public var owner: TW_Barz_Proto_ContractOwner {
    get {return _owner ?? TW_Barz_Proto_ContractOwner()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _owner: TW_Barz_Proto_ContractOwner? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Barz.Proto"

extension TW_Barz_Proto_ContractOwner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContractOwner"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key"),
    2: .standard(proto: "attestation_object"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .publicKey(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.kind != nil {try decoder.handleConflictingOneOf()}
          self.kind = .attestationObject(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.kind {
    case .publicKey?: try {
      guard case .publicKey(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .attestationObject?: try {
      guard case .attestationObject(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Barz_Proto_ContractOwner, rhs: TW_Barz_Proto_ContractOwner) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Barz_Proto_ContractAddressInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContractAddressInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "factory"),
    2: .standard(proto: "diamond_cut_facet"),
    3: .standard(proto: "account_facet"),
    4: .standard(proto: "verification_facet"),
    5: .standard(proto: "entry_point"),
    6: .standard(proto: "diamond_loupe_facet"),
    7: .standard(proto: "diamond_init"),
    8: .standard(proto: "facet_registry"),
    9: .same(proto: "bytecode"),
    10: .same(proto: "owner"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.factory) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.diamondCutFacet) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accountFacet) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.verificationFacet) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.entryPoint) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.diamondLoupeFacet) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.diamondInit) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.facetRegistry) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.bytecode) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.factory.isEmpty {
      try visitor.visitSingularStringField(value: self.factory, fieldNumber: 1)
    }
    if !self.diamondCutFacet.isEmpty {
      try visitor.visitSingularStringField(value: self.diamondCutFacet, fieldNumber: 2)
    }
    if !self.accountFacet.isEmpty {
      try visitor.visitSingularStringField(value: self.accountFacet, fieldNumber: 3)
    }
    if !self.verificationFacet.isEmpty {
      try visitor.visitSingularStringField(value: self.verificationFacet, fieldNumber: 4)
    }
    if !self.entryPoint.isEmpty {
      try visitor.visitSingularStringField(value: self.entryPoint, fieldNumber: 5)
    }
    if !self.diamondLoupeFacet.isEmpty {
      try visitor.visitSingularStringField(value: self.diamondLoupeFacet, fieldNumber: 6)
    }
    if !self.diamondInit.isEmpty {
      try visitor.visitSingularStringField(value: self.diamondInit, fieldNumber: 7)
    }
    if !self.facetRegistry.isEmpty {
      try visitor.visitSingularStringField(value: self.facetRegistry, fieldNumber: 8)
    }
    if !self.bytecode.isEmpty {
      try visitor.visitSingularStringField(value: self.bytecode, fieldNumber: 9)
    }
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Barz_Proto_ContractAddressInput, rhs: TW_Barz_Proto_ContractAddressInput) -> Bool {
    if lhs.factory != rhs.factory {return false}
    if lhs.diamondCutFacet != rhs.diamondCutFacet {return false}
    if lhs.accountFacet != rhs.accountFacet {return false}
    if lhs.verificationFacet != rhs.verificationFacet {return false}
    if lhs.entryPoint != rhs.entryPoint {return false}
    if lhs.diamondLoupeFacet != rhs.diamondLoupeFacet {return false}
    if lhs.diamondInit != rhs.diamondInit {return false}
    if lhs.facetRegistry != rhs.facetRegistry {return false}
    if lhs.bytecode != rhs.bytecode {return false}
    if lhs._owner != rhs._owner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
